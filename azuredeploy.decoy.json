{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
    "include-filesshare" : { 
        "type": "string",
        "defaultValue": "Yes",
        "allowedValues": [
          "Yes",
          "No"
        ]
    },
    "include-cosmosdb" : { 
        "type": "string",
        "defaultValue": "Yes",
        "allowedValues": [
          "Yes",
          "No"
        ]
    },
    "include-storage" : { 
        "type": "string",
        "defaultValue": "Yes",
        "allowedValues": [
          "Yes",
          "No"
        ]
    },
    "include-functions" : { 
        "type": "string",
        "defaultValue": "Yes",
        "allowedValues": [
          "Yes",
          "No"
        ]
    },
    "include-webapp" : { 
        "type": "string",
        "defaultValue": "Yes",
        "allowedValues": [
          "Yes",
          "No"
        ]
    },
    "include-sqlserver" : { 
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ]
    },
    "numof-filesshare" : { 
        "type": "int",
        "defaultValue": 1
    },
    "numof-cosmosdb" : { 
        "type": "int",
        "defaultValue": 1
    },
    "numof-storage" : { 
        "type": "int",
        "defaultValue": 1
    },
    "numof-functions" : { 
        "type": "int",
        "defaultValue": 1
    },
    "numof-webapp" : { 
        "type": "int",
        "defaultValue": 1
    },
    "numof-sqlserver" : { 
      "type": "int",
      "defaultValue": 1
   },
    "storageAccountType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_ZRS",
          "Premium_LRS"
        ],
        "metadata": {
          "description": "Storage Account type"
        }
      },
      "containerName": {
        "type": "string",
        "defaultValue": "logs",
        "metadata": {
            "description": "Specifies the name of the blob container."
        }
      },
      "fileShareName": {
        "type": "string",
        "metadata": {
          "description": "File Share Name"
        }
      },
      "containerInstanceLocation": {
        "type": "string",
        "defaultValue": "[parameters('location')]",
        "metadata": {
          "description": "Container Instance Location"
        }
      },
      "apiType": {
        "type": "string",
        "metadata": {
          "description": "The Azure Cosmos DB API type, by default Cassandra; otherwise one of Gremlin, MongoDB, SQL, or Table"
        },
        "allowedValues": [
          "Cassandra",
          "Gremlin",
          "MongoDB",
          "SQL",
          "Table"
        ],
        "defaultValue": "Cassandra"
      },
      "databaseAccountName": {
        "type": "string",
        "metadata": {
          "description": "The Azure Cosmos DB account name."
        }
      },
      "appName": {
        "type": "string",
        "metadata": {
          "description": "The name of the function app that you wish to create."
        }
      },
      "runtime": {
        "type": "string",
        "defaultValue": "node",
        "allowedValues": ["node", "dotnet", "java"],
        "metadata": {
          "description": "The language worker runtime to load in the function app."
        }
      },
      "skuName": {
        "type": "string",
        "defaultValue": "F1",
        "allowedValues": [
          "F1",
          "D1",
          "B1",
          "B2",
          "B3",
          "S1",
          "S2",
          "S3",
          "P1",
          "P2",
          "P3",
          "P4"
        ],
        "metadata": {
          "description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
        }
      },
      "skuCapacity": {
        "type": "int",
        "defaultValue": 1,
        "minValue": 1,
        "metadata": {
          "description": "Describes plan's instance count"
        }
      },
      "sqlAdministratorLogin": {
        "type": "string",
        "metadata": {
          "description": "The admin user of the SQL Server"
        }
      },
      "sqlAdministratorLoginPassword": {
        "type": "securestring",
        "metadata": {
          "description": "The password of the admin user of the SQL Server"
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
     }
    },
      "variables": {
        "functionAppName": "[parameters('appName')]",
        "hostingPlanName": "[concat(parameters('appName'), '-plan')]",
        "webSiteName": "[concat('webSite', uniqueString(resourceGroup().id))]",
        "hostingPlanNameWebApp": "[concat('hostingplan', uniqueString(resourceGroup().id), '-plan')]",
        "applicationInsightsName": "[concat(parameters('appName'), '-insights')]",
        "functionWorkerRuntime": "[parameters('runtime')]",
        "sqlserverName": "[concat('sqlserver', uniqueString(resourceGroup().id))]",
        "databaseName": "sampledb",
        "image": "microsoft/azure-cli",
        "offerType": "Standard",
        "cpuCores": "1.0",
        "memoryInGb": "1.5",
        "containerGroupName": "createshare-containerinstance",
        "containerName": "createshare"
     },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[concat(copyIndex(),'storage', uniqueString(resourceGroup().id))]",
        "location": "[parameters('location')]",
        "condition": "[equals(parameters('include-storage'), 'Yes')]",
        "apiVersion": "2018-07-01",
        "sku": {
          "name": "[parameters('storageAccountType')]"
        },
        "kind": "StorageV2",
        "properties": {},
        "copy": {
            "name": "storageemultiple",
            "count": "[parameters('numof-storage')]",
            "mode": "Serial",
            "batchSize": 1
        },
        "resources": [
            {
                "name": "[concat('default/', parameters('containerName'))]",
                "condition": "[equals(parameters('include-storage'), 'Yes')]",
                "type": "blobServices/containers",
                "apiVersion": "2018-07-01",
                "dependsOn": [
                    "[concat(copyIndex(),'storage', uniqueString(resourceGroup().id))]"
                ]
            }
        ]
      },
      {
        "name": "[concat(variables('containerGroupName'), '-', copyIndex(), '-', uniqueString(resourceGroup().id))]",
        "type": "Microsoft.ContainerInstance/containerGroups",
        "apiVersion": "2018-02-01-preview",
        "location": "[parameters('containerInstanceLocation')]",
        "condition": "[equals(parameters('include-filesshare'), 'Yes')]",
        "copy": {
            "name": "filesharemultiple",
            "count": "[parameters('numof-filesshare')]",
            "mode": "Serial",
            "batchSize": 1
        },
        "dependsOn": [
          "[concat(copyIndex(),'storage', uniqueString(resourceGroup().id))]"
        ],
        "properties": {
          "containers": [
            {
              "name": "[variables('containerName')]",
              "properties": {
                "image": "[variables('image')]",
                "command": [
                  "az",
                  "storage",
                  "share",
                  "create",
                  "--name",
                  "[parameters('fileShareName')]"
                ],
                "environmentVariables": [
                  {
                    "name": "AZURE_STORAGE_KEY",
                    "value": "[if(equals(parameters('include-storage'),'Yes'), listKeys(concat(copyIndex(),'storage', uniqueString(resourceGroup().id)),'2017-10-01').keys[0].value, 'dummy')]"
                  },
                  {
                    "name": "AZURE_STORAGE_ACCOUNT",
                    "value": "[if(equals(parameters('include-storage'),'Yes'), concat(copyIndex(),'storage', uniqueString(resourceGroup().id)), 'dummy')]"
                  }
                ],
                "resources": {
                  "requests": {
                    "cpu": "[variables('cpuCores')]",
                    "memoryInGb": "[variables('memoryInGb')]"
                  }
                }
              }
            }
          ],
          "restartPolicy": "OnFailure",
          "osType": "Linux"
        }
      },
      {
        "apiVersion": "2015-04-08",
        "type": "Microsoft.DocumentDB/databaseAccounts",
        "kind": "[if(equals(parameters('apiType'), 'MongoDB'), 'MongoDB', 'GlobalDocumentDB')]",
        "name": "[concat(parameters('databaseAccountName'), '-', copyIndex(), '-', uniqueString(resourceGroup().id))]",
        "location": "[parameters('location')]",
        "copy": {
            "name": "dbnosqlmultiple",
            "count": "[parameters('numof-cosmosdb')]",
            "mode": "Serial",
            "batchSize": 1
        },
        "condition": "[equals(parameters('include-cosmosdb'), 'Yes')]",
        "properties": {
          "name": "[concat(parameters('databaseAccountName'), '-', copyIndex(), '-', uniqueString(resourceGroup().id))]",
          "databaseAccountOfferType": "[variables('offerType')]",
          "locations": [
            {
              "locationName": "[parameters('location')]",
              "failoverPriority": 0
            },
            {
              "locationName": "[parameters('location')]",
              "failoverPriority": 1
            }
          ],
          "capabilities": [
            {
              "name": "[if(equals(parameters('apiType'), 'Cassandra'), 'EnableCassandra', if(equals(parameters('apiType'), 'Gremlin'), 'EnableGremlin', if(equals(parameters('apiType'), 'MongoDB'), '', if(equals(parameters('apiType'), 'SQL'), '', if(equals(parameters('apiType'), 'Table'), 'EnableTable', '')))))]"
            }
          ]
        },
        "tags": {
          "defaultExperience": "[if(equals(parameters('apiType'), 'Cassandra'), 'Cassandra', if(equals(parameters('apiType'), 'Gremlin'), 'Graph', if(equals(parameters('apiType'), 'MongoDB'), 'MongoDB', if(equals(parameters('apiType'), 'SQL'), 'DocumentDB', if(equals(parameters('apiType'), 'Table'), 'Table', '')))))]"
        }
      },
      {
        "apiVersion": "2016-03-01",
        "name": "[variables('hostingPlanName')]",
        "type": "Microsoft.Web/serverfarms",
        "location": "[parameters('location')]",
        "condition": "[equals(parameters('include-functions'), 'Yes')]",
        "tags": {
          "displayName": "HostingPlan"
        },
        "sku": {
          "name": "[parameters('skuName')]",
          "capacity": "[parameters('skuCapacity')]"
        },
        "properties": {
          "name": "[variables('hostingPlanName')]"
        }
      },
      {
        "apiVersion": "2018-05-01-preview",
        "name": "[variables('applicationInsightsName')]",
        "type": "Microsoft.Insights/components",
        "condition": "[equals(parameters('include-functions'), 'Yes')]",
        "location": "East US",
        "tags": {
          "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('applicationInsightsName'))]": "Resource"
        },
        "properties": {
          "ApplicationId": "[variables('applicationInsightsName')]",
          "Request_Source": "IbizaWebAppExtensionCreate"
        }
      },
      {
        "name": "[concat(variables('sqlserverName'), '-', copyIndex(), '-', uniqueString(resourceGroup().id))]",
        "type": "Microsoft.Sql/servers",
        "location": "[parameters('location')]",
        "condition": "[equals(parameters('include-sqlserver'), 'Yes')]",
        "tags": {
          "displayName": "SqlServer"
        },
        "copy": {
          "name": "sqlservermultiple",
          "count": "[parameters('numof-sqlserver')]",
          "mode": "Serial",
          "batchSize": 1
        },
        "apiVersion": "2014-04-01",
        "properties": {
          "administratorLogin": "[parameters('sqlAdministratorLogin')]",
          "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
          "version": "12.0"
        },
        "resources": [
          {
            "name": "[concat(variables('databasename'), '-', copyIndex(), '-', uniqueString(resourceGroup().id))]",
            "type": "databases",
            "location": "[parameters('location')]",
            "condition": "[equals(parameters('include-sqlserver'), 'Yes')]",
            "tags": {
              "displayName": "Database"
            },
            "apiVersion": "2015-01-01",
            "dependsOn": [
              "[concat(variables('sqlserverName'), '-', copyIndex(), '-', uniqueString(resourceGroup().id))]"
            ],
            "properties": {
              "edition": "Basic",
              "collation": "SQL_Latin1_General_CP1_CI_AS",
              "maxSizeBytes": "1073741824",
              "requestedServiceObjectiveName": "Basic"
            }
          },
          {
            "type": "firewallrules",
            "apiVersion": "2014-04-01",
            "condition": "[equals(parameters('include-sqlserver'), 'Yes')]",
            "dependsOn": [
              "[concat(variables('sqlserverName'), '-', copyIndex(), '-', uniqueString(resourceGroup().id))]"
            ],
            "location": "[parameters('location')]",
            "name": "[concat('AllowAllWindowsAzureIps',copyIndex())]",
            "properties": {
              "endIpAddress": "10.0.0.9",
              "startIpAddress": "10.0.0.0"
            }
          }
        ]
      },
      {
        "apiVersion": "2016-03-01",
        "name": "[variables('hostingPlanNameWebApp')]",
        "type": "Microsoft.Web/serverfarms",
        "location": "[parameters('location')]",
        "condition": "[equals(parameters('include-webapp'), 'Yes')]",
        "tags": {
          "displayName": "HostingPlan"
        },
        "sku": {
          "name": "[parameters('skuName')]",
          "capacity": "[parameters('skuCapacity')]"
        },
        "properties": {
          "name": "[variables('hostingPlanNameWebApp')]"
        }
      },
      {
        "apiVersion": "2015-08-01",
        "name": "[concat(variables('webSiteName'), copyIndex())]",
        "type": "Microsoft.Web/sites",
        "location": "[parameters('location')]",
        "condition": "[equals(parameters('include-webapp'), 'Yes')]",
        "copy": {
            "name": "websitemultiple",
            "count": "[parameters('numof-webapp')]",
            "mode": "Serial",
            "batchSize": 1
        },
        "dependsOn": [
          "[variables('hostingPlanNameWebApp')]"
        ],
        "tags": {
          "[concat('hidden-related:', resourceId('Microsoft.Web/serverfarms', variables('hostingPlanNameWebApp')))]": "empty",
          "displayName": "Website"
        },
        "properties": {
          "name": "[concat(variables('webSiteName'), copyIndex())]",
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanNameWebApp'))]"
        }
      }
    ]
  }